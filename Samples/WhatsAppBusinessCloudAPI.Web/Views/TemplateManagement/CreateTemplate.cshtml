@using WhatsappBusiness.CloudApi.Response
@model WhatsAppTemplateResponse;
@{
	ViewData["Title"] = "Get All Template  Page";
	// ViewData["CurrentPage"] = "Send WhatsApp Text Message";
	Layout = "~/Views/Shared/AdminLTE/_AdminLayout.cshtml";
	// ViewData["ControllerName"] = nameof(HomeController).Replace("Controller", "");
	// ViewData["ActionName"] = nameof(HomeController.SendWhatsAppTextMessage);
}

<section class="content">
    <div class="row g-3">
		<div class="col-12">
			<div class="card card-info">
				<div class="card-header">
					<h3 class="card-title">Create Template </h3>
				</div>


                <form id="templateForm" class="p-4 border rounded bg-light">
                    <h4>Create WhatsApp Template</h4>
                    <br />

                    <div class="row g-3">
                        <div class="col-md-6">
                            <label class="form-label">Template Name</label>
                            <input name="name" class="form-control" placeholder="fortune_diwali_sale88" required />
                        </div>

                        <div class="col-md-6">
                            <label class="form-label">Language</label>
                            <input name="language" class="form-control" placeholder="en_US" required />
                        </div>
                    </div>

                    <br />
                    <div class="row g-3">
                        <div class="col-md-6">
                            <label class="form-label">Category</label>
                            <input name="category" class="form-control" placeholder="MARKETING" required />
                        </div>
                    </div>

                    <hr />
                    <div id="componentsContainer">
                        <!-- One default HEADER component -->
                        <div class="component p-3 border rounded mb-3 bg-white">
                            <h5>Component</h5>
                            <div class="mb-2">
                                <label class="form-label">Type</label>
                                <select name="type" class="form-control" onchange="handleTypeChange(this)">
                                    <option value="HEADER">HEADER</option>
                                    <option value="BODY">BODY</option>
                                    <option value="FOOTER">FOOTER</option>
                                </select>
                            </div>
                            <div class="mb-2 format-group">
                                <label class="form-label">Format</label>
                                <input name="format" class="form-control" value="TEXT" />
                            </div>
                            @* <div class="mb-2">
                                <label class="form-label">Text</label>
                                <input name="text" class="form-control" value="Our sales is on!" />
                            </div> *@
                            <div class="mb-2">
                                @* <div class="example-group"> *@
                                    <label class="form-label">Example Text</label>
                                   @*  <input name="example_text" class="form-control" value="Diwali sales" /> *@
                                    <textarea class="form-control" name="text" id="exampleFormControlTextarea1" rows="3" value="Diwali sales"></textarea>

                                @* </div> *@
                            </div>
                            <button type="button" data-bs-toggle="tooltip" title="Add variable" class="btn btn-light" id="Addvariable"><i class="fa-solid fa-plus"></i></button>
                            <br />
                            <div id="variableInputsContainer" class="mb-3"></div>
                        </div>
                    </div>
                   
                     
                        
                   
                    <button type="button" class="btn btn-secondary mb-2" onclick="addComponent()">Add Component</button>
                    <br />
                    <button type="submit" class="btn btn-primary">Save Template</button>
                </form>

				
			</div> <!-- /.card -->
		</div>
	</div>
</section>


@section Scripts {
	@{
		await Html.RenderPartialAsync("_ValidationScriptsPartial");
	}
    <script>
        document.getElementById("templateForm").addEventListener("submit", async function (e) {
            e.preventDefault();

            const form = e.target;
            const name = form.querySelector('[name="name"]').value;
            const language = form.querySelector('[name="language"]').value;
            const category = form.querySelector('[name="category"]').value;

            const components = [];
            const componentDivs = document.querySelectorAll('.component');


            componentDivs.forEach(div => {
                const type = div.querySelector('[name="type"]').value.toUpperCase();
                const text = div.querySelector('[name="text"]').value;

                const component = {
                    type,
                    text
                };

                if (type === "HEADER") {
                    component.format = div.querySelector('[name="format"]').value;
                    const headerExample = div.querySelector('[name="example_text"]').value;
                    if (headerExample) {
                        component.example = {
                            header_text: [headerExample]
                        };
                    }
                }  
                    else if (type === "BODY") {
                        // Collect all dynamic variable inputs inside this component
                        const variableInputs = div.querySelectorAll('input[name^="variable_"]');
                        const variableValues = Array.from(variableInputs).map(input => input.value);

                        if (variableValues.length > 0) {
                            // WhatsApp expects nested array: body_text: [ [values] ]
                            component.example = {
                                body_text: [variableValues]
                            };
                        } else {
                            // fallback to example_text textarea content if no variables entered
                            const bodyExample = div.querySelector('[name="example_text"]').value;
                            if (bodyExample) {
                                component.example = {
                                    body_text: [bodyExample]
                                };
                            }
                        }
                    }

                components.push(component);
            });

            const payload = {
                name,
                language,
                category,
                components
            };

            const response = await fetch('/TemplateManagement/CreateTemplates', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(payload)
            });

            const result = await response.json();
            if (response.ok) {
                alert("Template created successfully: " + JSON.stringify(result));
            } else {
                alert("Error: " + result);
            }
        });

               function addComponent() {
            const container = document.getElementById("componentsContainer");

            const div = document.createElement("div");
            div.className = "component p-3 border rounded mb-3 bg-white";
            div.innerHTML = `
                <h5>Component</h5>
                <div class="mb-2">
                    <label class="form-label">Type</label>
                    <select name="type" class="form-control" onchange="handleTypeChange(this)">
                        <option value="HEADER">HEADER</option>
                        <option value="BODY">BODY</option>
                        <option value="FOOTER">FOOTER</option>
                    </select>
                </div>
                <div class="mb-2 format-group">
                    <label class="form-label">Format</label>
                    <input name="format" class="form-control" value="TEXT" />
                </div>
                <div class="mb-2">
                    <label class="form-label">Text</label>
                    <input name="text" class="form-control" placeholder="Enter text" />
                </div>
                
                <div class="mb-2 example-group">
                                <label class="form-label">Example Text</label>
                               @*  <input name="example_text" class="form-control" value="Diwali sales" /> *@
                                <textarea class="form-control" name="example_text"  id="exampleFormControlTextarea1" rows="3" value="Diwali sales"></textarea>

                            </div>
                
            `;
            container.appendChild(div);
        }


             function handleTypeChange(select) {
            const componentDiv = select.closest('.component');
            const formatGroup = componentDiv.querySelector('.format-group');
            const exampleGroup = componentDiv.querySelector('.example-group');
            const bodyExampleGroup = componentDiv.querySelector('.component-body');

            const type = select.value;

            if (type === "HEADER") {
                formatGroup.style.display = "block";
                exampleGroup.style.display = "block";
                if (bodyExampleGroup) bodyExampleGroup.style.display = "none";
                exampleGroup.querySelector('label').innerText = "Example Header Text";
            } else if (type === "BODY") {
                formatGroup.style.display = "none";
                exampleGroup.style.display = "none";
                if (bodyExampleGroup) bodyExampleGroup.style.display = "block";
            } else {
                formatGroup.style.display = "none";
                exampleGroup.style.display = "none";
                if (bodyExampleGroup) bodyExampleGroup.style.display = "none";
            }
        }


        //    $(document).ready(function () {
        //     let variableCount = 1;

        //     $('#Addvariable').click(function () {
        //         const textarea = $('#exampleFormControlTextarea1');
        //         const currentText = textarea.val();

        //         Append variable like {{1}}, {{2}}, ...
        //         const updatedText = currentText + ' {{' + variableCount + '}}';
        //         textarea.val(updatedText);

        //         variableCount++; Increment for next click
        //     });
        // });
             $(document).ready(function () {
            // Enable tooltip
            const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
            const tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl)
            });

            let variableCount = 1;

            $('#Addvariable').click(function () {
                
                const textarea = $('#exampleFormControlTextarea1');
                const currentText = textarea.val();
                textarea.val(currentText + ' {{' + variableCount + '}}');

                const newInput = `
                    <div class="mb-2 input-group">
                      
                            <div class="input-group-prepend">
                                <span class="input-group-text" id="inputGroupPrepend">{{${variableCount}}}</span>
                            </div>
                        <input type="text" class="form-control" name="variable_${variableCount}" placeholder="Add value for {{${variableCount}}}" />
                    </div>
                `;
                $('#variableInputsContainer').append(newInput);

                variableCount++;
            });
        });

    </script>
   
}
